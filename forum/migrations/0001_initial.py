# Generated by Django 5.1.4 on 2024-12-11 01:16

import django.core.validators
import django.db.models.deletion
import forum.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('moderators', models.ManyToManyField(blank=True, related_name='moderated_categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_closed', models.BooleanField(default=False)),
                ('is_private', models.BooleanField(default=False)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('access_type', models.CharField(choices=[('public', 'Public'), ('private', 'Privé'), ('password', 'Protégé par mot de passe'), ('invite', 'Sur invitation uniquement')], default='public', max_length=20)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='forum.category')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_topics', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, related_name='private_topics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Contenu inapproprié'), ('harassment', 'Harcèlement'), ('other', 'Autre')], max_length=20)),
                ('details', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('resolved', 'Résolu'), ('dismissed', 'Rejeté')], default='pending', max_length=20)),
                ('handled_at', models.DateTimeField(blank=True, null=True)),
                ('handled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handled_reports', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_topics', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='forum.topic')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='forum.comment')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='forum.topic')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forum_id', models.PositiveIntegerField(editable=False, unique=True, verbose_name='ID Forum')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', validators=[forum.models.validate_avatar_extension, forum.models.validate_avatar_size], verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, max_length=500, validators=[django.core.validators.MinLengthValidator(10, message='La bio doit contenir au moins 10 caractères'), django.core.validators.MaxLengthValidator(500, message='La bio ne peut pas dépasser 500 caractères'), forum.models.validate_bio_content], verbose_name='Biographie')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='Dernière adresse IP utilisée pour la connexion', null=True, verbose_name='Dernière IP de connexion')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives de connexion échouées')),
                ('last_failed_login', models.DateTimeField(blank=True, null=True, verbose_name='Dernière tentative échouée')),
                ('is_banned', models.BooleanField(default=False, help_text="Indique si l'utilisateur est banni du forum", verbose_name='Banni')),
                ('ban_reason', models.TextField(blank=True, verbose_name='Raison du bannissement')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Dernière activité')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email vérifié')),
                ('security_questions_set', models.BooleanField(default=False, verbose_name='Questions de sécurité configurées')),
                ('two_factor_enabled', models.BooleanField(default=False, verbose_name='2FA activé')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('friends', models.ManyToManyField(blank=True, to='forum.userprofile', verbose_name='Amis')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateurs',
            },
        ),
        migrations.AddField(
            model_name='topic',
            name='with_friend',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shared_topics', to='forum.userprofile'),
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to='forum.userprofile')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='forum.userprofile')),
            ],
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['forum_id'], name='forum_userp_forum_i_bf088a_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['created_at'], name='forum_userp_created_f885f8_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['last_activity'], name='forum_userp_last_ac_6c7851_idx'),
        ),
    ]
